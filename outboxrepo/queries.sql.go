// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queries.sql

package outboxrepo

import (
	"context"
	"encoding/json"
)

const createOutboxEvent = `-- name: CreateOutboxEvent :exec
INSERT INTO foundation_outbox_events (topic, key, payload, headers, created_at)
VALUES ($1, $2, $3, $4, NOW())
`

type CreateOutboxEventParams struct {
	Topic   string
	Key     string
	Payload []byte
	Headers json.RawMessage
}

func (q *Queries) CreateOutboxEvent(ctx context.Context, arg CreateOutboxEventParams) error {
	_, err := q.db.ExecContext(ctx, createOutboxEvent,
		arg.Topic,
		arg.Key,
		arg.Payload,
		arg.Headers,
	)
	return err
}

const deleteOutboxEvents = `-- name: DeleteOutboxEvents :exec
DELETE FROM foundation_outbox_events WHERE id <= $1
`

func (q *Queries) DeleteOutboxEvents(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOutboxEvents, id)
	return err
}

const listOutboxEvents = `-- name: ListOutboxEvents :many
SELECT id, topic, key, payload, headers, created_at FROM foundation_outbox_events ORDER BY id ASC LIMIT $1
`

func (q *Queries) ListOutboxEvents(ctx context.Context, limit int32) ([]FoundationOutboxEvent, error) {
	rows, err := q.db.QueryContext(ctx, listOutboxEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FoundationOutboxEvent
	for rows.Next() {
		var i FoundationOutboxEvent
		if err := rows.Scan(
			&i.ID,
			&i.Topic,
			&i.Key,
			&i.Payload,
			&i.Headers,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
